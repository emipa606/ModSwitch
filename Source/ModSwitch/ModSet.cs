using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using HarmonyLib;
using RimWorld;
using UnityEngine;
using Verse;

namespace DoctorVanGogh.ModSwitch;

internal class ModSet : IExposable
{
    public const string Export_ElementName = "ModSet";
    private static readonly FieldInfo fiModsConfig_data;

    private static readonly FieldInfo fiModsConfigData_version;

    private static readonly Regex rgxSteamModId;

    private static TipSignal? _renameTip;

    private static TipSignal? _deleteTip;

    private static TipSignal? _exportTip;

    private readonly Settings _owner;

    private TipSignal? _modsTip;

    public bool AutoGenerated;

    public int BuildNumber = -1;

    public List<string> Mods = new List<string>();

    public string Name = string.Empty;

    static ModSet()
    {
        var typeFromHandle = typeof(ModsConfig);
        fiModsConfigData_version = AccessTools.Field(AccessTools.Inner(typeFromHandle, "ModsConfigData"), "version");
        fiModsConfig_data = AccessTools.Field(typeFromHandle, "data");
        rgxSteamModId = new Regex("^\\d+$", RegexOptions.Compiled | RegexOptions.Singleline);
    }

    public ModSet(Settings owner)
    {
        _owner = owner;
    }

    private TipSignal Tip
    {
        get
        {
            var valueOrDefault = _modsTip.GetValueOrDefault();
            TipSignal value;
            if (!_modsTip.HasValue)
            {
                valueOrDefault = new TipSignal(ToString());
                _modsTip = valueOrDefault;
                value = valueOrDefault;
            }
            else
            {
                value = valueOrDefault;
            }

            return new TipSignal?(value).Value;
        }
    }

    private static TipSignal TipRename
    {
        get
        {
            var valueOrDefault = _renameTip.GetValueOrDefault();
            TipSignal value;
            if (!_renameTip.HasValue)
            {
                valueOrDefault = new TipSignal("ModSwitch.Tip.Rename".Translate());
                _renameTip = valueOrDefault;
                value = valueOrDefault;
            }
            else
            {
                value = valueOrDefault;
            }

            return new TipSignal?(value).Value;
        }
    }

    private static TipSignal TipDelete
    {
        get
        {
            var valueOrDefault = _deleteTip.GetValueOrDefault();
            TipSignal value;
            if (!_deleteTip.HasValue)
            {
                valueOrDefault = new TipSignal("ModSwitch.Tip.Delete".Translate());
                _deleteTip = valueOrDefault;
                value = valueOrDefault;
            }
            else
            {
                value = valueOrDefault;
            }

            return new TipSignal?(value).Value;
        }
    }

    private static TipSignal TipExport
    {
        get
        {
            var valueOrDefault = _exportTip.GetValueOrDefault();
            TipSignal value;
            if (!_exportTip.HasValue)
            {
                valueOrDefault = new TipSignal("ModSwitch.Tip.Export".Translate());
                _exportTip = valueOrDefault;
                value = valueOrDefault;
            }
            else
            {
                value = valueOrDefault;
            }

            return new TipSignal?(value).Value;
        }
    }

    public void ExposeData()
    {
        Scribe_Collections.Look(ref Mods, false, "mods");
        Scribe_Values.Look(ref Name, "name");
        Scribe_Values.Look(ref BuildNumber, "buildNumber");
        Scribe_Values.Look(ref AutoGenerated, "autoGenerated");
    }

    public void Apply(Page_ModsConfig owner)
    {
        var tuple = ModConfigUtil.TryResolveModsList(Mods.Select((m, idx) => new
        {
            id = m,
            Index = idx
        }), mmd => mmd.FolderName, t => t.id, (mmd, t) => new
        {
            Mod = mmd, t.Index
        }, (_, t) => t.id);
        var item = tuple.Resolved;
        var notInstalled = tuple.Unresolved;
        var installedMods = (from t in item
            orderby t.Index
            select t.Mod).ToArray();
        if (notInstalled.Length != 0)
        {
            var missing = (from s in notInstalled
                select new
                {
                    Key = s,
                    IsSteam = rgxSteamModId.IsMatch(s)
                }
                into t
                orderby t.Key
                select t).ToArray();
            var stringBuilder = new StringBuilder("ModSwitch.MissingMods".Translate(Name));
            stringBuilder.AppendLine();
            stringBuilder.AppendLine();
            foreach (var anon in missing)
            {
                stringBuilder.AppendLine(anon.IsSteam ? " - [Steam] " + anon.Key : " - " + anon.Key);
            }

            Find.WindowStack.Add(new Dialog_MissingMods(stringBuilder.ToString(),
                delegate { ApplyMods(installedMods, owner); }, delegate
                {
                    foreach (var anon2 in missing)
                    {
                        Process.Start(Util.BuildWorkshopUrl(anon2.Key, anon2.Key));
                    }
                }, delegate
                {
                    Mods.RemoveAll(s => notInstalled.Any(ni => ni == s));
                    _owner.Mod.WriteSettings();
                    ApplyMods(installedMods, owner);
                }));
        }
        else
        {
            ApplyMods(installedMods, owner);
        }
    }

    private static void ApplyMods(IEnumerable<ModMetaData> mods, Page_ModsConfig owner)
    {
        ModsConfig.SetActiveToList(mods.Select(mmd => mmd.PackageId).ToList());
        InvalidateCache(owner);
    }

    public static void InvalidateCache(Page_ModsConfig page)
    {
        Settings.RecacheSelectedModRequirements(page, Settings.Empty);
        ModsConfig.GetModWarnings();
        Settings.Page_ModsConfig_SetModWarningsCached();
    }

    private string Colorize(string modId, string text = null)
    {
        var text2 = text ?? modId;
        var color = _owner.Attributes[modId].Color;
        if (!color.HasValue)
        {
            return text2;
        }

        return text2.Colorize(color.Value);
    }

    public void Delete()
    {
        if (_owner.Sets.Remove(this))
        {
            _owner.Mod.WriteSettings();
        }
    }

    public void DoWindowContents(Rect rect, int reorderableGroup)
    {
        var num = rect.height - 4f;
        var num2 = 3;
        ReorderableWidget.Reorderable(reorderableGroup, rect);
        var num3 = rect.width - (4 * num2 * 2f) - (num2 * num);
        Widgets.Label(new Rect(rect.x, rect.y + 2f, (num3 * 0.6f) - 2f, num), Name);
        var rect2 = new Rect(rect.x + (num3 * 0.6f) + 6f, rect.y + 2f, num3 * 0.4f, num);
        Widgets.Label(rect2, "ModSwitch.ModSet.Mods".Translate(Mods.Count));
        TooltipHandler.TipRegion(rect2, Tip);
        var rect3 = new Rect(rect.x + num3 + 10f, rect.y + 2f, num, num);
        if (ExtraWidgets.ButtonImage(rect3, Assets.Edit, false, TipRename, rect3.ContractedBy(4f)))
        {
            Find.WindowStack.Add(new Dialog_SetText(delegate(string s)
            {
                Name = s;
                _owner.Mod.WriteSettings();
            }, Name));
        }

        var rect4 = new Rect(rect.x + num3 + 14f + num, rect.y + 2f, num, num);
        if (ExtraWidgets.ButtonImage(rect4, Assets.Extract, false, TipExport, rect4.ContractedBy(4f)))
        {
            Find.WindowStack.Add(new Dialog_SetText(delegate(string s)
                {
                    try
                    {
                        ExportModSet(s);
                    }
                    catch (Exception e)
                    {
                        Util.DisplayError(e);
                    }
                }, Name,
                s =>
                    MS_GenFilePaths.AllExports.Select(fi => Path.GetFileNameWithoutExtension(fi.FullName))
                        .Any(fileName => fileName == s)
                        ? "ModSwitch.Error.TargetExists".Translate()
                        : null));
        }

        var rect5 = new Rect(rect.x + num3 + 18f + (2f * num), rect.y + 2f, num, num);
        if (ExtraWidgets.ButtonImage(rect5, Assets.Delete, false, TipDelete, rect5.ContractedBy(4f)))
        {
            Find.WindowStack.Add(Dialog_MessageBox.CreateConfirmation("ModSwitch.ModSet.ConfirmDelete".Translate(Name),
                Delete, true, "ModSwitch.Confirmation.Title".Translate()));
        }
    }

    private void ExportModSet(string name)
    {
        var text = MS_GenFilePaths.FilePathForModSetExport(name);
        if (File.Exists(text))
        {
            throw new ArgumentException("ModSwitch.Error.TargetExists.Detailed".Translate(text));
        }

        Scribe.saver.InitSaving(text, "ModSwitch.Export");
        try
        {
            Scribe.EnterNode("ModSet");
            try
            {
                ExposeData();
            }
            finally
            {
                Scribe.ExitNode();
            }
        }
        finally
        {
            Scribe.saver.FinalizeSaving();
        }
    }

    public static ModSet FromCurrent(string name, Settings owner)
    {
        var value = fiModsConfig_data.GetValue(null);
        return new ModSet(owner)
        {
            Name = name,
            BuildNumber = VersionControl.BuildFromVersionString((string)fiModsConfigData_version.GetValue(value)),
            Mods = ModsConfig.ActiveModsInLoadOrder.Select(mmd => mmd.FolderName).ToList()
        };
    }

    public override string ToString()
    {
        return ModConfigUtil.LetOuterJoin(Mods, mmd => mmd.FolderName, s => s).Combine(
            delegate((string Key, ModMetaData MetaData, string Candidate) t)
            {
                var (modId, modMetaData, _) = t;
                object obj;
                if (modMetaData == null || !modMetaData.OnSteamWorkshop)
                {
                    obj = t.MetaData?.Name;
                    if (obj == null)
                    {
                        (obj, _, _) = t;
                    }

                    if (obj == null)
                    {
                        obj = "";
                    }
                }
                else
                {
                    obj = $"[S] {t.MetaData.Name}";
                }

                return Colorize(modId, (string)obj);
            });
    }
}